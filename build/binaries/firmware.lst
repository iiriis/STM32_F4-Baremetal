
./build/binaries/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init         00000004  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fini         00000004  08000190  08000190  00001190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000006  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000005  20000000  0800019a  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ARM.attributes 00000030  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY
  6 .comment      00000012  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY
  7 .debug_info   000003c6  00000000  00000000  00002047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000211  00000000  00000000  0000240d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loclists 0000008b  00000000  00000000  0000261e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000020  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   000003e4  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    000079ab  00000000  00000000  00002aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000068  00000000  00000000  0000a458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00001be0  00000000  00000000  0000a4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 000001d8  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <GPIO_Init>:
#include "utils.h"


void GPIO_Init()
{
  RCC_AHB1ENR |= _bit(2); //enabling clock for GPIO Bank C
 8000000:	4a16      	ldr	r2, [pc, #88]	@ (800005c <GPIO_Init+0x5c>)
 8000002:	f8d2 3830 	ldr.w	r3, [r2, #2096]	@ 0x830
 8000006:	f043 0304 	orr.w	r3, r3, #4
 800000a:	f8c2 3830 	str.w	r3, [r2, #2096]	@ 0x830

  /*USER LED on Pin C13*/
  GPIOC_MODER = _clrBit(GPIOC_MODER, 26); //clear the bit status
 800000e:	4b14      	ldr	r3, [pc, #80]	@ (8000060 <GPIO_Init+0x60>)
 8000010:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000014:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8000018:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  GPIOC_MODER = _clrBit(GPIOC_MODER, 27); //clear the bit status
 800001c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000020:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
 8000024:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  GPIOC_MODER = _setBit(GPIOC_MODER, 26); //set the 13th GPIO with 01 status; i.e OUTPUT
 8000028:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 800002c:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000030:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  GPIOC_OTYPER = _clrBit(GPIOC_MODER, 13); //set the 13th GPIO as Push, Pull
 8000034:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000038:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800003c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  GPIOC_OSPEEDR = _setBit(GPIOC_MODER, 26); //set the 13th GPIO as very high speed Output
 8000040:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000044:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000048:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
  GPIOC_OSPEEDR = _setBit(GPIOC_MODER, 27);
 800004c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000050:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8000054:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

 8000058:	4770      	bx	lr
 800005a:	bf00      	nop
 800005c:	40023000 	.word	0x40023000
 8000060:	40020000 	.word	0x40020000

08000064 <delay>:
}


void delay(uint64_t del)
{
  while(del)
 8000064:	e003      	b.n	800006e <delay+0xa>
  {
    asm("nop");
 8000066:	bf00      	nop
    del--;
 8000068:	3801      	subs	r0, #1
 800006a:	f141 31ff 	adc.w	r1, r1, #4294967295
  while(del)
 800006e:	ea50 0301 	orrs.w	r3, r0, r1
 8000072:	d1f8      	bne.n	8000066 <delay+0x2>
  }
 8000074:	4770      	bx	lr

08000076 <configureSystemClock>:
#include "rcc.h"
#include "utils.h"

void configureSystemClock()
{
  RCC_CR = _setBit(RCC_CR, 16); //Select HSE as main clock
 8000076:	4a1f      	ldr	r2, [pc, #124]	@ (80000f4 <configureSystemClock+0x7e>)
 8000078:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 800007c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000080:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
  while(!_chkBit(RCC_CR, 17));  //wait for HSE to stabilize
 8000084:	4b1b      	ldr	r3, [pc, #108]	@ (80000f4 <configureSystemClock+0x7e>)
 8000086:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800008a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800008e:	d0f9      	beq.n	8000084 <configureSystemClock+0xe>
  /*configure PLL*/
  RCC_PLLCFGR |= _bit(22);      //select HSE as the PLL clock
 8000090:	4b18      	ldr	r3, [pc, #96]	@ (80000f4 <configureSystemClock+0x7e>)
 8000092:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 8000096:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800009a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  RCC_PLLCFGR |= 25;            //divide the HSE clock with 25 PLLM
 800009e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 80000a2:	f042 0219 	orr.w	r2, r2, #25
 80000a6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  RCC_PLLCFGR |= (336<<6);      //VCO multiplication factor, PLLN
 80000aa:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 80000ae:	f442 42a8 	orr.w	r2, r2, #21504	@ 0x5400
 80000b2:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  RCC_PLLCFGR &= ~_bit(13);     //clear 13th bit, initially it was set by the reset value; required for the Multiplication factor
 80000b6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 80000ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80000be:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  RCC_PLLCFGR |= (1<<16);       //PLL out div factor 4(PLLP: 01) (336/4 = 84)
 80000c2:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 80000c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80000ca:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
  RCC_PLLCFGR |= (7<<24);       //VCO div factor of 7 for peripherals (336/7=48) , PLLQ
 80000ce:	f8d3 2804 	ldr.w	r2, [r3, #2052]	@ 0x804
 80000d2:	f042 62e0 	orr.w	r2, r2, #117440512	@ 0x7000000
 80000d6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  RCC_CR |= _bit(24);           //PLL ON
 80000da:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80000de:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80000e2:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
  while(!_chkBit(RCC_CR, 25));  //wait for PLL to stabilize
 80000e6:	4b03      	ldr	r3, [pc, #12]	@ (80000f4 <configureSystemClock+0x7e>)
 80000e8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80000ec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80000f0:	d0f9      	beq.n	80000e6 <configureSystemClock+0x70>

  // RCC_CFGR &= ~_bit(0);
  // RCC_CFGR |= _bit(1);         //Switch clock to PLL
  // while(!((RCC_CFGR & 0b1100) == 0x1000));  //wait until the clock has switched  
}
 80000f2:	4770      	bx	lr
 80000f4:	40023000 	.word	0x40023000

080000f8 <main>:
int main(void) {
 80000f8:	b580      	push	{r7, lr}
  configureSystemClock();
 80000fa:	f7ff ffbc 	bl	8000076 <configureSystemClock>
  GPIO_Init();
 80000fe:	f7ff ff7f 	bl	8000000 <GPIO_Init>
      memcpy(arr, "Hello", 5);
 8000102:	4b0f      	ldr	r3, [pc, #60]	@ (8000140 <main+0x48>)
 8000104:	4a0f      	ldr	r2, [pc, #60]	@ (8000144 <main+0x4c>)
 8000106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800010a:	6018      	str	r0, [r3, #0]
 800010c:	7119      	strb	r1, [r3, #4]
      GPIOC_ODR = _setBit(GPIOC_ODR, 13);
 800010e:	4c0e      	ldr	r4, [pc, #56]	@ (8000148 <main+0x50>)
 8000110:	f8d4 3814 	ldr.w	r3, [r4, #2068]	@ 0x814
 8000114:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000118:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
      delay(1000000);
 800011c:	4e0b      	ldr	r6, [pc, #44]	@ (800014c <main+0x54>)
 800011e:	2700      	movs	r7, #0
 8000120:	4630      	mov	r0, r6
 8000122:	4639      	mov	r1, r7
 8000124:	f7ff ff9e 	bl	8000064 <delay>
      GPIOC_ODR = _clrBit(GPIOC_ODR, 13);
 8000128:	f8d4 3814 	ldr.w	r3, [r4, #2068]	@ 0x814
 800012c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000130:	f8c4 3814 	str.w	r3, [r4, #2068]	@ 0x814
      delay(1000000);
 8000134:	4630      	mov	r0, r6
 8000136:	4639      	mov	r1, r7
 8000138:	f7ff ff94 	bl	8000064 <delay>
  for(;;)
 800013c:	e7e1      	b.n	8000102 <main+0xa>
 800013e:	bf00      	nop
 8000140:	20000000 	.word	0x20000000
 8000144:	08000194 	.word	0x08000194
 8000148:	40020000 	.word	0x40020000
 800014c:	000f4240 	.word	0x000f4240

08000150 <_reset>:
int main(void);

__attribute__((naked, noreturn)) void _reset(void) {
  // memset .bss to zero, and copy .data section to RAM region
  extern long _sbss, _ebss, _sdata, _edata, _sidata;
  for (long *src = &_sbss; src < &_ebss; src++) *src = 0;
 8000150:	4b09      	ldr	r3, [pc, #36]	@ (8000178 <_reset+0x28>)
 8000152:	e002      	b.n	800015a <_reset+0xa>
 8000154:	2200      	movs	r2, #0
 8000156:	f843 2b04 	str.w	r2, [r3], #4
 800015a:	4a08      	ldr	r2, [pc, #32]	@ (800017c <_reset+0x2c>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d3f9      	bcc.n	8000154 <_reset+0x4>
  for (long *src = &_sdata, *dst = &_sidata; src < &_edata;) *src++ = *dst++;
 8000160:	4a07      	ldr	r2, [pc, #28]	@ (8000180 <_reset+0x30>)
 8000162:	4b08      	ldr	r3, [pc, #32]	@ (8000184 <_reset+0x34>)
 8000164:	e003      	b.n	800016e <_reset+0x1e>
 8000166:	f852 1b04 	ldr.w	r1, [r2], #4
 800016a:	f843 1b04 	str.w	r1, [r3], #4
 800016e:	4906      	ldr	r1, [pc, #24]	@ (8000188 <_reset+0x38>)
 8000170:	428b      	cmp	r3, r1
 8000172:	d3f8      	bcc.n	8000166 <_reset+0x16>

  main();             // Call main()
 8000174:	f7ff ffc0 	bl	80000f8 <main>
 8000178:	20000005 	.word	0x20000005
 800017c:	20000005 	.word	0x20000005
 8000180:	0800019a 	.word	0x0800019a
 8000184:	20000000 	.word	0x20000000
 8000188:	20000005 	.word	0x20000005

Disassembly of section .init:

0800018c <_init>:
 800018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800018e:	bf00      	nop

Disassembly of section .fini:

08000190 <_fini>:
 8000190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000192:	bf00      	nop
